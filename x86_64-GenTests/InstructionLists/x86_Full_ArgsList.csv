Argument's name;Type;Size;Description
rel8;RELATIVE;BYTE;A relative address in the range from 128 bytes before the end of the instruction to 127 bytes after the end of the instruction.
rel16;RELATIVE;WORD;A relative address within the same code segment as the instruction assembled. The rel16 symbol applies to instructions with an operand-size attribute of 16 bits.
rel32;RELATIVE;LONG;A relative address within the same code segment as the instruction assembled. The rel32 symbol applies to instructions with an operand-size attribute of 32 bits.
rel64;RELATIVE;QUAD;A relative address within the same code segment as the instruction assembled. The rel64 symbol applies to instructions with an operand-size attribute of 64 bits.
ptr16:16;RELATIVE;MEM;A far pointer, typically to a code segment different from that of the instruction. The notation 16:16 indicates that the value of the pointer has two parts. The value to the left of the colon is a 16-bit selector or value destined for the code segment register. The value to the right corresponds to the offset within the destination segment. The ptr16:16 symbol is used when the instruction's operand-size attribute is 16 bits.
ptr16:32;RELATIVE;MEM;A far pointer, typically to a code segment different from that of the instruction. The notation 16:32 indicates that the value of the pointer has two parts. The value to the left of the colon is a 16-bit selector or value destined for the code segment register. The value to the right corresponds to the offset within the destination segment. The ptr16:32 symbol is used when the operand-size attribute is 32 bits.
ptr16:64;RELATIVE;MEM;A far pointer, typically to a code segment different from that of the instruction. The notation 16:64 indicates that the value of the pointer has two parts. The value to the left of the colon is a 16-bit selector or value destined for the code segment register. The value to the right corresponds to the offset within the destination segment. The ptr16:64 symbol is used when the operand-size attribute is 64 bits.
r8<>[ABCD]H;REGISTER;STDBYTE;One of the byte general-purpose registers: AL, CL, DL, BL, AH, CH, DH, BH, BPL, SPL, DIL and SIL; or one of the byte registers (R8L - R15L) available when using REX.R and 64-bit mode.
r8;REGISTER;STDBYTE;One of the byte general-purpose registers: AL, CL, DL, BL, AH, CH, DH, BH, BPL, SPL, DIL and SIL; or one of the byte registers (R8L - R15L) available when using REX.R and 64-bit mode.
r16;REGISTER;STDWORD;One of the word general-purpose registers: AX, CX, DX, BX, SP, BP, SI, DI; or one of the word registers (R8W-R15W) available when using REX.R and 64-bit mode.
r32;REGISTER;STDLONG;One of the doubleword general-purpose registers: EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI; or one of the doubleword registers (R8D - R15D) available when using REX.R in 64-bit mode.
r64;REGISTER;STDQUAD;One of the quadword general-purpose registers: RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8–R15. These are available when using REX.R and 64-bit mode.
imm8;IMMEDIATE;BYTE;An immediate byte value. The imm8 symbol is a signed number between –128 and +127 inclusive. For instructions in which imm8 is combined with a word or doubleword operand, the immediate value is sign-extended to form a word or doubleword. The upper byte of the word is filled with the topmost bit of the immediate value.
imm16;IMMEDIATE;WORD;An immediate word value used for instructions whose operand-size attribute is 16 bits. This is a number between –32,768 and +32,767 inclusive.
imm32;IMMEDIATE;LONG;An immediate doubleword value used for instructions whose operand-size attribute is 32 bits. It allows the use of a number between +2,147,483,647 and –2,147,483,648 inclusive.
imm64;IMMEDIATE;QUAD;An immediate quadword value used for instructions whose operand-size attribute is 64 bits. The value allows the use of a number between +9,223,372,036,854,775,807 and –9,223,372,036,854,775,808 inclusive.
m/r8<>[ABCD]H;REGISTER_OR_MEMORY;;A byte operand that is either the contents of a byte general-purpose register (AL, CL, DL, BL, AH, CH, DH, BH, BPL, SPL, DIL and SIL) or a byte from memory. Byte registers R8L - R15L are available using REX.R in 64-bit mode.
m/r8;REGISTER_OR_MEMORY;;A byte operand that is either the contents of a byte general-purpose register (AL, CL, DL, BL, AH, CH, DH, BH, BPL, SPL, DIL and SIL) or a byte from memory. Byte registers R8L - R15L are available using REX.R in 64-bit mode.
m/r16;REGISTER_OR_MEMORY;;A word general-purpose register or memory operand used for instructions whose operand-size attribute is 16 bits. The word general-purpose registers are: AX, CX, DX, BX, SP, BP, SI, DI. The contents of memory are found at the address provided by the effective address computation. Word registers R8W - R15W are available using REX.R in 64-bit mode.
m/r32;REGISTER_OR_MEMORY;;A doubleword general-purpose register or memory operand used for instructions whose operand-size attribute is 32 bits. The doubleword general-purpose registers are: EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI. The contents of memory are found at the address provided by the effective address computation. Doubleword registers R8D - R15D are available when using REX.R in 64-bit mode.
m/r64;REGISTER_OR_MEMORY;;A quadword general-purpose register or memory operand used for instructions whose operand-size attribute is 64 bits when using REX.W. Quadword general-purpose registers are: RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8–R15; these are available only in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.
m;MEMORY;MEM;A 16-, 32- or 64-bit operand in memory.
m2B;MEMORY;MEM2B;
m8;MEMORY;MEM8b;A byte operand in memory, usually expressed as a variable or array name, but pointed to by the DS:(E)SI or ES:(E)DI registers. In 64-bit mode, it is pointed to by the RSI or RDI registers.
m14B;MEMORY;MEM14B;
m16;MEMORY;MEM16b;A word operand in memory, usually expressed as a variable or array name, but pointed to by the DS:(E)SI or ES:(E)DI registers. This nomenclature is used only with the string instructions.
m28B;MEMORY;MEM28B;
m32;MEMORY;MEM32b;A doubleword operand in memory, usually expressed as a variable or array name, but pointed to by the DS:(E)SI or ES:(E)DI registers. This nomenclature is used only with the string instructions.
m64;MEMORY;MEM64b;A memory quadword operand in memory.
m94B;MEMORY;MEM94B;
m108B;MEMORY;MEM108B;
m128;MEMORY;MEM128b;A memory double quadword operand in memory. This nomenclature is used only with SSE and SSE2 instructions.
m256;MEMORY;MEM256b;
m512B;MEMORY;MEM512B;
m14B/m28B;MEMORY_OR_MEMORY;;
m94B/m108B;MEMORY_OR_MEMORY;;
m16:16;MEMORY;MEM;A memory operand containing a far pointer composed of two numbers. The number to the left of the colon corresponds to the pointer's segment selector. The number to the right corresponds to its offset.
m16:32;MEMORY;MEM;A memory operand containing a far pointer composed of two numbers. The number to the left of the colon corresponds to the pointer's segment selector. The number to the right corresponds to its offset.
m16:64;MEMORY;MEM;A memory operand containing a far pointer composed of two numbers. The number to the left of the colon corresponds to the pointer's segment selector. The number to the right corresponds to its offset.
m16&32;MEMORY;MEM;A memory operand consisting of data item pairs whose sizes are indicated on the left and the right side of the ampersand. All memory addressing modes are allowed. The m16&32 operand is used by LIDT and LGDT to provide a word with which to load the limit field, and a doubleword with which to load the base field of the corresponding GDTR and IDTR registers.
m16&16;MEMORY;MEM;A memory operand consisting of data item pairs whose sizes are indicated on the left and the right side of the ampersand. All memory addressing modes are allowed. The m16&16 operand is used by the BOUND instruction to provide an operand containing an upper and lower bounds for array indices.
m32&32;MEMORY;MEM;A memory operand consisting of data item pairs whose sizes are indicated on the left and the right side of the ampersand. All memory addressing modes are allowed. The m32&32 operand is used by the BOUND instruction to provide an operand containing an upper and lower bounds for array indices.
m16&64;MEMORY;MEM;A memory operand consisting of data item pairs whose sizes are indicated on the left and the right side of the ampersand. All memory addressing modes are allowed. The m16&64 operand is used by LIDT and LGDT in 64-bit mode to provide a word with which to load the limit field, and a quadword with which to load the base field of the corresponding GDTR and IDTR registers.
moffs8;MEMORY;MEM8b;A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.
moffs16;MEMORY;MEM16b;A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.
moffs32;MEMORY;MEM32b;A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.
moffs64;MEMORY;MEM64b;A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.
Sreg;REGISTER;SEGMENT;A segment register. The segment register bit assignments are ES = 0, CS = 1, SS = 2, DS = 3, FS = 4, and GS = 5.
m32fp;MEMORY;MEM32b;A single-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions.
m64fp;MEMORY;MEM64b;A double-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions.
m80fp;MEMORY;MEM80b;A double extended-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions.
m80bcd;MEMORY;MEM80b;
m16int;MEMORY;MEM16b;A word integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions.
m32int;MEMORY;MEM32b;A doubleword integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions.
m64int;MEMORY;MEM64b;A quadword integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions.
ST(0);REGISTER;FLOAT;The top element of the FPU register stack.
ST(i);REGISTER;FLOAT;The ith element from the top of the FPU register stack (i ← 0 through 7).
mm;REGISTER;MMX;An MMX register. The 64-bit MMX registers are: MM0 through MM7.
mm/m32;REGISTER_OR_MEMORY;;The low order 32 bits of an MMX register or a 32-bit memory operand. The 64-bit MMX registers are: MM0 through MM7. The contents of memory are found at the address provided by the effective address computation.
mm/m64;REGISTER_OR_MEMORY;;An MMX register or a 64-bit memory operand. The 64-bit MMX registers are: MM0 through MM7. The contents of memory are found at the address provided by the effective address computation.
xmm;REGISTER;XMM;An XMM register. The 128-bit XMM registers are: XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode.
xmm/m16;REGISTER_OR_MEMORY;;An XMM register or a 16-bit memory operand. The 128-bit XMM registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.
xmm/m32;REGISTER_OR_MEMORY;;An XMM register or a 32-bit memory operand. The 128-bit XMM registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.
xmm/m64;REGISTER_OR_MEMORY;;An XMM register or a 64-bit memory operand. The 128-bit SIMD floating-point registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.
xmm/m128;REGISTER_OR_MEMORY;;An XMM register or a 128-bit memory operand. The 128-bit XMM registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.
XMM0;REGISTER;XMM;
ymm;REGISTER;YMM;
ymm/m256;REGISTER_OR_MEMORY;;
creg;REGISTER;CONTROL;
CR8;REGISTER;CONTROL;
dreg;REGISTER;DEBUG;
1;IMMEDIATE;BYTE;
3;IMMEDIATE;BYTE;
(R)DI;MEMORY;MEM;
(R)SI;MEMORY;MEM;
(R)DI/ES:(E)DI;MEMORY;MEM;
ES:(E)DI;MEMORY;MEM;
DS:(E)SI;MEMORY;MEM;
(E)DI;MEMORY;MEM;
(R)DI/(E)DI;MEMORY;MEM;
(R)SI/(E)SI;MEMORY;MEM;
DS:(R)BX/DS:(E)BX;MEMORY;MEM;
AX;REGISTER;STDWORD;
DX;REGISTER;STDWORD;
EAX;REGISTER;STDLONG;
RAX;REGISTER;STDQUAD;
AL;REGISTER;STDBYTE;
CL;REGISTER;STDBYTE;
CS;REGISTER;SEGMENT;
DS;REGISTER;SEGMENT;
ES;REGISTER;SEGMENT;
FS;REGISTER;SEGMENT;
GS;REGISTER;SEGMENT;
SS;REGISTER;SEGMENT;
